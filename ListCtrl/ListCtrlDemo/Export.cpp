#include "StdAfx.h"
#include "Export.h"
#include "ResultListCtrl.h"
#include "CFileParser.h"

CCSVExporter::CCSVExporter(CListCtrl* pListCtrl) : m_pListCtrl(pListCtrl)
{
}

BOOL CCSVExporter::DoExport(LPCTSTR lpFileName)
{
	BOOL bResult = FALSE;

	CString szText; 
	int i, j;
	TRY
	{
		CStdioFile cFile(lpFileName, CFile::modeCreate | CFile::modeWrite);
		
		szText.Empty();
		LoadHeaderString(szText);
		cFile.WriteString(szText + "\n");
		
		
		int nColCount = m_pListCtrl->GetHeaderCtrl()->GetItemCount();
		int nRowCount = m_pListCtrl->GetItemCount();
		for(i = 0; i < nRowCount; i++)
		{
			szText.Empty();
			for(j = 0; j < nColCount; j++)
			{
				szText += m_pListCtrl->GetItemText(i, j);
				if(j < (nColCount - 1))
				{
					szText += ",";
				}
			}
			szText += "\n";
			
			cFile.WriteString(szText);
		}

		//Total Statistic


		cFile.Close();
		
		bResult = TRUE;
	}
	CATCH(CFileException, e)
	{
		TCHAR szCause[255];
		CString msg;
		
		e->GetErrorMessage(szCause, 255);	   
		AfxMessageBox(szCause, MB_OK | MB_ICONEXCLAMATION);
	}
	AND_CATCH_ALL(e)
	{
		AfxMessageBox("Error writing to file!", 
			MB_OK | MB_ICONEXCLAMATION);
	}
	END_CATCH_ALL
		
	return bResult;    
}

void CCSVExporter::LoadHeaderString(CString& str)
{
	CHeaderCtrl* pHeaderCtrl = m_pListCtrl->GetHeaderCtrl();
	int nColCount = pHeaderCtrl->GetItemCount();

	TCHAR lpBuffer[256];

	HDITEM hdi;
	hdi.mask = HDI_TEXT;
	hdi.pszText = lpBuffer;
	hdi.cchTextMax = 256;

	for(int i = 0; i < nColCount; i++)
	{
		pHeaderCtrl->GetItem(i, &hdi);
		str += hdi.pszText;
		if(i < (nColCount - 1))
		{
			str += ",";
		}
	}
}



CXLSExporter::CXLSExporter(CResultListCtrl* pListCtrl) : m_pListCtrl(pListCtrl)
{

}

BOOL CXLSExporter::DoExport(LPCTSTR lpFileName)
{
	BOOL bResult = FALSE;
	
	CDatabase database;
	//Excel driver
	CString sDriver = "MICROSOFT EXCEL DRIVER (*.XLS)";
	CString sSql;
	
	TRY
	{
		//Specifies an ODBC connect string
		sSql.Format("DRIVER={%s};DSN='';FIRSTROWHASNAMES=1;READONLY=FALSE;CREATE_DB=\"%s\";DBQ=%s",
			sDriver, lpFileName, lpFileName);
		
		//Create Excel database
		if( database.OpenEx(sSql, CDatabase::noOdbcDialog) )
		{
			m_pListCtrl->ExportAsExcel(database);
		}      
		
		//Close Database
		database.Close();

		bResult = TRUE;
	}
	CATCH_ALL(e)
	{
		TCHAR szCause[4096];
		CString msg;
		
		e->GetErrorMessage(szCause, 4096);	   
		AfxMessageBox(szCause, MB_OK | MB_ICONEXCLAMATION);
	}
	END_CATCH_ALL
	
	return bResult;
}

CXMLExporter::CXMLExporter(CResultListCtrl* pListCtrl) : m_pListCtrl(pListCtrl)
{
}

BOOL CXMLExporter::DoExport(LPCTSTR lpFileName)
{
	CString s;
    BOOL bResult = FALSE;

    TRY
    {
        CStdioFile cFile(lpFileName, CFile::modeCreate | CFile::modeWrite);

        //Get the app's path
		CString sPath;
		GetModuleFileName(NULL, sPath.GetBufferSetLength(MAX_PATH + 1), MAX_PATH);
		sPath.ReleaseBuffer();
		int nPos = sPath.ReverseFind(_T('\\'));
		sPath = sPath.Left(nPos);

		CString sXSLFileName = sPath + "\\Reports\\default.xsl";

		CString sXSLT;
		sXSLT.Format("<?xml-stylesheet type=\"text/xsl\" href=\"%s\"?>\n", sXSLFileName);
        
        
        // the header
        s.Format(
            // header
            "<?xml version=\"1.0\"?>\n"
            "\n"
            "<!--\n"
            "\n"
            " Project statistics generated by Project Line Counter\n"
            "\n"
            "\tlines-total:     count of all lines in the file\n"
            "\tlines-code:      count of lines that only have code\n"
            "\tlines-comments:  count of lines that only have comments\n"
            "\tlines-both:      count of lines that have both code and comments\n"
            "\tlines-blank:     count of lines without code or comments\n"
            "\tlines-not-blank: same as (lines-total - lines-blank) and (lines-code + lines-comments + lines-both)\n"
            "\n"
            "-->\n\n"       

            // style sheet
            "%s"

            // root
            "<statistics licence=\"%s\" date=\"%s\" plc_ver=\"%d.%02d\">\n",
            sXSLT, "Unregistered",
            CTime::GetCurrentTime().Format("%A, %B %d, %Y"),
            VERSION_MJR, VERSION_MIN);
        cFile.WriteString(s);

		int nRowCount = m_pListCtrl->GetItemCount();
		for(int i = 0; i < nRowCount; i++)
		{
			CFileInfo* pFileInfo = (CFileInfo*)m_pListCtrl->GetItemData(i);
			s.Format(
				"\t\t<file id=\"%s\">\n"
				"\t\t\t<path>%s</path>\n"
				"\t\t\t<name>%s</name>\n"
				"\t\t\t<ext>%s</ext>\n"
				"\t\t\t<lines-total>%d</lines-total>\n"
				"\t\t\t<lines-code>%d</lines-code>\n"
				"\t\t\t<lines-comments>%d</lines-comments>\n"
				"\t\t\t<lines-both>%d</lines-both>\n"
				"\t\t\t<lines-blank>%d</lines-blank>\n"
				"\t\t\t<lines-not-blank>%d</lines-not-blank>\n"
				"\t\t</file>\n",
				pFileInfo->m_sFullFileName,
				pFileInfo->m_sFilePath,
				pFileInfo->m_sFileName,
				pFileInfo->m_sFileExt,
				pFileInfo->m_nTotalLines,
				pFileInfo->m_nCodeLines,
				pFileInfo->m_nCommentLines,
				pFileInfo->GetMixedLines(),
				pFileInfo->m_nBlankLines,
				pFileInfo->m_nTotalLines - pFileInfo->m_nBlankLines);
			
			cFile.WriteString(s);
		}
		cFile.WriteString("</statistics>\n");
		cFile.Close();
		bResult = TRUE;
    }
	CATCH_ALL(e)
	{
		TCHAR szCause[4096];
		CString msg;
		
		e->GetErrorMessage(szCause, 4096);	   
		AfxMessageBox(szCause, MB_OK | MB_ICONEXCLAMATION);
	}
	END_CATCH_ALL
		
	return bResult;    
}


CHTMLExporter::CHTMLExporter(CResultListCtrl* pListCtrl) : m_pListCtrl(pListCtrl)
{
}

BOOL CHTMLExporter::DoExport(LPCTSTR lpFileName)
{
	CString s;
    BOOL bResult = FALSE;
	
    TRY
    {
        CStdioFile cFile(lpFileName, CFile::modeCreate | CFile::modeWrite);     
        
        // the header
        s.Format(
			"<HTML>\n"
			"<HEAD>\n"
			"\t<META HTTP-EQUIV=\"CONTENT-TYPE\" CONTENT=\"TEXT/HTML; CHARSET=UTF-8\" />\n"
			"\t<TITLE>Statistics Result - %s</TITLE>\n"
			"</HEAD>\n"
			"<BODY>\n"
			"\n"
			"<TABLE NOSAVE=\"\"  BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"100%%\"><TBODY><TR NOSAVE=\"\">\n"
			"\t<TD COLSPAN=\"2\" ROWSPAN=\"2\" NOSAVE=\"\"><FONT SIZE=5 COLOR=\"#336666\"><B>Statistics Result</B></FONT></TD>\n"
			"\t<TD ALIGN=\"RIGHT\"><FONT SIZE=2 COLOR=\"#336666\">Powered by Colin</FONT><BR><FONT SIZE=2 COLOR=\"#336666\">%s</FONT></TD>\n"
			"</TR></TBODY></TABLE>\n\n<HR>\n\n",
            SZ_VERSION_NAME, SZ_VERSION_NAME);
        cFile.WriteString(s);
		
		//Summary
		s.Format(
			"<P></P>\n"
			"<FONT SIZE=\"4\" COLOR=\"%s\"><B>SOURCE CODE LINES</B></FONT><BR>\n\n"
			"<FONT SIZE=2>\n"
			"<TABLE BORDER=\"1\" CELLSPACING=\"0\" COLS=\"3\" WIDTH=100%%>\n\n"
			"<TR BGCOLOR=\"#E5E5E5\"><TH ALIGN=\"LEFT\" WIDTH=\"30%%\">TYPE</TH><TH WIDTH=\"20%%\">LINES</TH><TH>PERCENTAGE(%%)</TH></TR>\n\n",
			GetHtmlColorStr());
		cFile.WriteString(s);

		//Code
		s.Format(
			"<TR><TD>%s</TD><TD ALIGN=\"RIGHT\">%d</TD>\n"
			"\t<TD>"
			"\t\t<TABLE BORDER=0 CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"%d%%\"><TR BGCOLOR=\"#1A87D5\"><TD>%d%%&nbsp;</TD></TR></TABLE>"
			"\t</TD>"
			"</TR>",
			"Code", 1234, 60, 60
		);
		cFile.WriteString(s);

		//Comment
		s.Format(
			"<TR BGCOLOR=%s><TD>%s</TD><TD ALIGN=\"RIGHT\">%d</TD>\n"
			"\t<TD>"
			"\t\t<TABLE BORDER=0 CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"%d%%\"><TR BGCOLOR=\"#1A87D5\"><TD>%d%%&nbsp;</TD></TR></TABLE>"
			"\t</TD>"
			"</TR>",
			GetHtmlColorStr(), "Comment", 185, 28, 28
			);
		cFile.WriteString(s);

		//Format tail
		s.Format(
			"</TABLE>\n"
			"</FONT>\n"
			"<P></P>\n"
			"<P></P>\n");
		cFile.WriteString(s);

		s.Format(
			"<BR />\n"
			"<TABLE BORDER=\"0\">\n"
			"<TR>\n"
			"<TD>\n"
			"<TABLE BORDER=\"1\" CELLPADDING=\"2\" CELLSPACING=\"0\" CLASS=\"FILESTATS\">\n"
			"<TR CLASS=\"FILESTATS-HEADING\">\n"
			"<TD ROWSPAN=\"2\">FILE NAME</TD>\n"
			"<TD COLSPAN=\"5\">LINES</TD>\n"
			"<TD ROWSPAN=\"2\">PATH</TD>\n"
			"</TR>\n\n"
			"<TR CLASS=\"FILESTATS-HEADING\">\n"
				"<TD>TOTAL</TD>\n"
				"<TD>CODE<BR />ONLY</TD>\n"
				"<TD>COMMENTS<BR />ONLY</TD>\n"
				"<TD>CODE WITH<BR />COMMENTS</TD>\n"
				"<TD>BLANK</TD>\n"
			"</TR>\n");
		cFile.WriteString(s);

		int nRowCount = m_pListCtrl->GetItemCount();
		for(int i = 0; i < nRowCount; i++)
		{
			CFileInfo* pFileInfo = (CFileInfo*)m_pListCtrl->GetItemData(i);
			
			s.Format(
				"<TR>\n<TD>%s</TD>\n<TD>%d</TD>\n<TD>%d(%s)</TD>\n<TD>%d(%s)</TD>\n"
				"<TD>%d(%s)</TD>\n<TD>%d(%s)</TD>\n<TD>%s</TD>\n</TR>\n",
				pFileInfo->m_sFileName, pFileInfo->m_nTotalLines, pFileInfo->m_nCodeLines,
				CommonUtils::GetPercentStr(pFileInfo->m_nCodeLines, pFileInfo->m_nTotalLines),
				pFileInfo->m_nCommentLines, CommonUtils::GetPercentStr(pFileInfo->m_nCommentLines, pFileInfo->m_nTotalLines),
				pFileInfo->GetMixedLines(), CommonUtils::GetPercentStr(pFileInfo->GetMixedLines(), pFileInfo->m_nTotalLines),
				pFileInfo->m_nBlankLines, CommonUtils::GetPercentStr(pFileInfo->m_nBlankLines, pFileInfo->m_nTotalLines),
				pFileInfo->m_sFilePath
				);
			cFile.WriteString(s);
		}
		s.Format(
			"</TABLE>\n</TD>\n</TR>\n<TR>\n<TD>&nbsp;</TD>\n</TR>\n</TABLE>\n\n<BR/>\n"
			);
		cFile.WriteString(s);
		//Tail
		s.Format(
			"<TABLE NOSAVE=\"\" BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\" COLS=\"1\" WIDTH=100%%>\n"
			"<TR><TD><FONT SIZE=2>2011-05-31 14:35:16</FONT><HR></TD></TR>\n"
			"<TR ALIGN=RIGHT><TD><FONT SIZE=2>(C) %s, SINCE 1999. ALL RIGHTS RESERVED.</FONT></TD></TR>\n"
			"</TABLE>\n\n"
			"</BODY>\n"
			"</HTML>\n",
			"Colin Conger77");
		cFile.WriteString(s);
		cFile.Close();
		bResult = TRUE;
    }
	CATCH_ALL(e)
	{
		TCHAR szCause[4096];
		CString msg;
		
		e->GetErrorMessage(szCause, 4096);	   
		AfxMessageBox(szCause, MB_OK | MB_ICONEXCLAMATION);
	}
	END_CATCH_ALL
		
	return bResult;
}

CString CHTMLExporter::GetHtmlColorStr(COLORREF cr)
{
	CString str;
	str.Format("#%02X%02X%02X", GetRValue(cr), GetGValue(cr), GetBValue(cr));
	return str;
}

